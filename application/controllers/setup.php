<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Setup extends CI_Controller {

	public function __construct() {
	    parent::__construct();
	    
	    /* Load the libraries and helpers */
	    $this->load->database();
	}

	private function doesConstraintExist($constraintName){
		if(!empty ($constraintName)){
			$sql = "SELECT 1 FROM information_schema.TABLE_CONSTRAINTS WHERE ".
                   "CONSTRAINT_SCHEMA = DATABASE() AND ".
                   "CONSTRAINT_NAME   = ?";
                   
            $query = $this->db->query($sql, array($constraintName));  
            return $query->num_rows()>0;
		}
		return false;
	}

	public function user($what=null){

		$createTable = function(){

$table = <<<'EOD'
CREATE TABLE IF NOT EXISTS `user` (
`id` int(11) NOT NULL AUTO_INCREMENT,
`firstName` varchar(255) NOT NULL,
`middleName` varchar(255) DEFAULT NULL,
`lastName` varchar(255) NOT NULL,
`email` varchar(255) NOT NULL,
`password` varchar(255) NOT NULL,
`salt` varchar(255) NOT NULL,
`createdOn` datetime NOT NULL,
`updatedOn` datetime NOT NULL,
UNIQUE KEY `UNQ1_USER` (`email`),
PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 ;
EOD;
			$query = $this->db->query($table);	
		};

		$insertData = function(){
			$salt = substr(str_shuffle(MD5(microtime())), 0, 10);
			$createdOn = date("Y-m-d H:i:s");
			$password = hash('sha512','Letmein5%'.$salt);

$record = <<<EOD
INSERT INTO `user` (`id`, `firstName`, `middleName`, `lastName`, `email`, `password`, `salt`, `createdOn`, `updatedOn`) VALUES
(1, 'Deewendra', 'Gopal', 'Shrestha', 'deewendra.shrestha@gmail.com', '{$password}', '{$salt}', '{$createdOn}', '{$createdOn}')
EOD;
			$query = $this->db->query($record);	
		};

		$clearData = function(){
$record = <<<'EOD'
TRUNCATE TABLE `user`
EOD;
			$query = $this->db->query($record);	
		};

		if(isset($what)){
			if($what==='table'){
				$createTable();
			} else if ($what==='data'){
				$insertData();
			} else if ($what==='clear'){
				$clearData();
			} 
		}
		else {
			$createTable();
			$clearData();
			$insertData();
		}
	}

	/**
	 * Sets up DB.
	 *
	 */
	public function index()	{
		$tables = array();
		$constraints = array();
		$records = array();

//TABLE SCRIPTS		

		array_push($tables, array('name'=>'user', 'script'=>$table));		

	
$table = <<<'EOD'
CREATE TABLE IF NOT EXISTS `album` (
`id` int(11) NOT NULL AUTO_INCREMENT,
`name` varchar(255) NOT NULL,
`description` text,
`uploadDate` date NOT NULL,
`coverPhoto` int(11) DEFAULT NULL,
UNIQUE KEY `UNQ1_ALBUM` (`name`),
PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 AUTO_INCREMENT=1
EOD;
		array_push($tables, array('name'=>'album', 'script'=>$table));		

$table = <<<'EOD'
CREATE TABLE IF NOT EXISTS `photo` (
`id` int(11) NOT NULL AUTO_INCREMENT,
`album` int(11) NOT NULL,
`name` varchar(255) NOT NULL,
`description` int(11) NOT NULL,
`meta` text,
PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 AUTO_INCREMENT=1
EOD;
		array_push($tables, array('name'=>'photo', 'script'=>$table));	

$table = <<<'EOD'
CREATE TABLE IF NOT EXISTS `blog_category` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `UNQ1_BLOG_CATEGORY` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 
EOD;
		array_push($tables, array('name'=>'blog_category', 'script'=>$table));	

$table = <<<'EOD'
CREATE TABLE IF NOT EXISTS `blog` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `category_id` int(11) NOT NULL,
  `title` varchar(500) NOT NULL,
  `content` text,
  `post_dt` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `attachment` longblob,
  `filename` varchar(200) DEFAULT NULL,
  `filetype` varchar(200) DEFAULT NULL,
  `filesize` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`,`category_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 AUTO_INCREMENT=1 
EOD;
		array_push($tables, array('name'=>'blog', 'script'=>$table));

//CONSTRAINTS SCRIPTS
$constraint = <<<'EOD'
ALTER TABLE `photo` ADD CONSTRAINT `FK1_PHOTO` FOREIGN KEY (`album`) REFERENCES `album` (`id`) ON DELETE CASCADE
EOD;

		array_push($constraints, array('name'=>'FK1_PHOTO', 'script'=>$constraint));

//INSERT RECORDS SCRIPTS
$record = <<<'EOD'
TRUNCATE TABLE `blog_category`
EOD;
	array_push($records, $record);

$record = <<<'EOD'
INSERT INTO `blog_category` (`id`, `name`) VALUES
(2, 'MOBILE'),
(3, 'MYSQL'),
(1, 'PHP')
EOD;
	array_push($records, $record);

$record = <<<'EOD'
TRUNCATE TABLE `blog`
EOD;
	array_push($records, $record);	

$record = <<<'EOD'
INSERT INTO `blog` (`id`, `category_id`, `title`, `content`, `post_dt`, `attachment`, `filename`, `filetype`, `filesize`) VALUES
(1, 1, 'Creating a basic MVC based solution in PHP', '<p>What is this MVC people talk about these days? That was my initial thought when I started hearing about MVC in my work place back in around 2006. After looking it up in google, I first got that MVC is short hand for Model, View and Controller and then I lost interest. Few weeks passed by and then I was still hearing MVC from every angle possible - folks who spoke about MVC had kinda smug on their face. So I forced myself to look into it one more time - one of the best decision I made in my career. This is what I had engraved in my mind and still have : Model is where your business rule goes, View is associated with the visual aspect of your code so in web world that must mean HTML CSS stuff and then Controller is a mysterious beast that glues Model and View together. The rule is - user will interact with just controller and the controller will do the task of instantiating the right model and calling proper methods on it and supplying data to the correct view and rendering it. Simple right? Well not so fast, I knew how to put model in code but view and controller made no sense to me because I was so used to having these both mixed up together, I couldn&#39;t fathom how I will be able to separate them and then I had opportunity to work with smarty template engine and wolla I could piece together the puzzle. Smarty basically is a HTML file and has placeholders, and the value of the placeholder is provided by controller. Now smarty also supports plugins and control structure etc etc but lets not go there. The solution we will be building won&#39;t be using smarty but since PHP itself is pretty darn good templating tool, we will be using it. OK enough of history, now to the details.</p>\r\n\r\n<p>I am assuming that you have wamp or something equivalent running and we are able to run php scripts. Lets assume that our working folder/project name in &quot;simplemvc&quot;, the folder structure of simplemvc will look like this:<br />\r\nsimplemvc\\.htaccess<br />\r\nsimplemvc\\index.php /* mother controller */<br />\r\nsimplemvc\\model /* folder where all your models rest */<br />\r\nsimplemvc\\model\\userModel.php<br />\r\nsimplemvc\\view /* folder where all your views rest */<br />\r\nsimplemvc\\view\\listUser.php<br />\r\nsimplemvc\\controller /* folder where all your controllers rest */<br />\r\nsimplemvc\\controller\\user.php<br />\r\nsimplemvc\\lib /*some library functions*/<br />\r\nsimplemvc\\lib\\helper.php<br />\r\nsimplemvc\\lib\\model.php<br />\r\nsimplemvc\\lib\\view.php<br />\r\nsimplemvc\\lib\\controller.php</p>\r\n\r\n<p>Before proceeding I must say this is just one of the many ways that you can implement MVC in php. Most popular PHP frameworks already follow MVC paradigm, you can dissect the code and understand how they have implemented the MVC paradigm. This post is to give you idea on how you can implement your own &quot;basic&quot; MVC in php using OOP.</p>\r\n\r\n<p><br />\r\nFirst we will create .htaccess file under simplemvc folder with following content :</p>\r\n\r\n<div class="code">\r\n<p>RewriteEngine On<br />\r\nRewriteCond %{REQUEST_FILENAME} !(?=jpg|png|gif|js|css|pdf|docx|htm)<br />\r\nRewriteRule ^(.*)$ index.php</p>\r\n</div>\r\n\r\n<p>What this rewrite rule does is, for any page request like http://hostname/simeplmvc/* except for files with extension jpg or png or gif or js or css or pdf or docx or htm files, the request will get passed to index.php. Think of index.php as mother controller who creates other child controllers. Why we would want this?<br />\r\na) we can use very structured URL of format htttp://HOSTNAME/CONTROLLER_NAME/METHOD_OR_ACTION_TO_INVOKE_IN_CONTROLLER[/GET PARAMS]<br />\r\nb) most rest web services use this kind of URL pattern<br />\r\nc) we can take advantage of this to make URL more SEO friendly<br />\r\nNote : Generally adding .htaccess file works but if it doesn&#39;t then follow http://www.tildemark.com/enable-htaccess-on-apache/</p>\r\n\r\n<p><br />\r\nNext we will look into index.php. Since all the requests are forwarded to index.php, the task of this script would be to find the correct controller and method on the controller to invoke based on the url of the request. The code for index.php would look like :</p>\r\n\r\n<div class="code">\r\n<p>&lt;?php<br />\r\nrequire_once(&quot;lib/helper.php&quot;);<br />\r\nrequire_once(&quot;lib/controller.php&quot;);<br />\r\nrequire_once(&quot;lib/model.php&quot;);<br />\r\nrequire_once(&quot;lib/view.php&quot;);</p>\r\n\r\n<p>$urlParts = helper::parseURL();<br />\r\n$controllerName = $urlParts[&#39;CONTROLLER&#39;];<br />\r\n$actionName = $urlParts[&#39;ACTION&#39;];<br />\r\n$_GET = $urlParts[&#39;GET&#39;];</p>\r\n\r\n<p>//CHECKING IF THE REQUESTED CONTROLLER EXISTS OR NOT<br />\r\nif (file_exists(&#39;controller/&#39;.$controllerName . &quot;.php&quot;)) {<br />\r\n&nbsp;&nbsp;&nbsp; include(&#39;controller/&#39;.$controllerName. &quot;.php&quot;);<br />\r\n&nbsp;&nbsp;&nbsp; $obj = new $controllerName;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; if (method_exists($obj, $actionName)) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; call_user_func_array(array($obj, $actionName), array());<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp; else<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo &#39;Sorry the requested action doesn\\&#39;t exist!&#39;;<br />\r\n}<br />\r\nelse {<br />\r\n&nbsp;&nbsp;&nbsp; echo &#39;Sorry the requested page doesn\\&#39;t exist!&#39;;<br />\r\n}<br />\r\n?&gt;</p>\r\n</div>\r\n\r\n<p>Since we want OOP, it makes sense to represent model, view and cotroller each with their own class so that we can use template methods. I will write skeleton code for all these, you may add your own methods later to make it behave as you want.</p>\r\n\r\n<div class="code">\r\n<p>&lt;?php<br />\r\n//helper.php file<br />\r\ndefine(&quot;CONST_DEFAULT_CONTROLLER&quot;, &quot;user&quot;);<br />\r\ndefine(&quot;CONST_DEFAULT_ACTION&quot;, &quot;listUser&quot;);</p>\r\n\r\n<p>/* as the name suggests this is a helper class with some helper functions */<br />\r\nclass helper {<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; /*<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; * This function parses the URI and then returns an array with controller name,action name and get parameters<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; */<br />\r\n&nbsp;&nbsp;&nbsp; public static function parseURL($url = null) {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $url = is_null($url) ? $_SERVER[&#39;REQUEST_URI&#39;] : $url;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $urlParts = explode(&#39;/&#39;, $url);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return array(&#39;CONTROLLER&#39; =&gt; (isset($urlParts[2]) &amp;&amp; trim($urlParts[2]) != &#39;&#39;) ? $urlParts[2] : CONST_DEFAULT_CONTROLLER,<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#39;ACTION&#39; =&gt; (isset($urlParts[3]) &amp;&amp; trim($urlParts[3]) != &#39;&#39;) ? self::getActionName($urlParts[3]) : CONST_DEFAULT_ACTION,<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#39;GET&#39; =&gt; self::returnGetParams($url));<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; /*<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; * This function returns the right action name<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; * its handles the case where url is like hostname/simplemvc/user/listUser/id/1<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; * or url is like hostname/simplemvc/user/listUser?id=1<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; */<br />\r\n&nbsp;&nbsp;&nbsp; public static function getActionName($url) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (strpos($url, &#39;?&#39;) === false) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return $url;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return substr($url, 0, strpos($url, &#39;?&#39;));<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; #This functions parses the URL and makes $_GET like array and returns it<br />\r\n&nbsp;&nbsp;&nbsp; #@param string $url<br />\r\n&nbsp;&nbsp;&nbsp; #$url is any valid URL</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; public static function returnGetParams($url = null) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $urlParts = explode(DIRECTORY_SEPARATOR, $url);</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (strpos($url, &#39;?&#39;) === false) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $gets = array();<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for ($i = 4; $i &lt;= count($urlParts); $i+=2) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (isset($urlParts[$i]) &amp;&amp; trim($urlParts[$i]) != &#39;&#39;) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $gets[$urlParts[$i]] = $urlParts[$i + 1];<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return $gets;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //normal get params<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return $_GET;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n\r\n<p>?&gt;</p>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<div class="code">&lt;?php<br />\r\n//controller.php file<br />\r\nclass controller {<br />\r\n&nbsp;&nbsp;&nbsp; public $view;/* will hold view object */<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;//constructor<br />\r\n&nbsp;&nbsp;&nbsp; public function controller(){<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $this-&gt;view = new view();<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;//returns view object<br />\r\n&nbsp;&nbsp;&nbsp; public function getView(){<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return $this-&gt;view;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; //instantiates a model for you and returns the object<br />\r\n&nbsp;&nbsp;&nbsp; public function useModel($modelName) {\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $filePathFull = &#39;model&#39;.DIRECTORY_SEPARATOR.$modelName.&quot;.php&quot;;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(!(file_exists($filePathFull))){<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $filePathFull.&quot; model doesnot exist.&quot;;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; include_once($filePathFull);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return $this-&gt;createObject($modelName);<br />\r\n&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; //the idea was to create a factory but oh well<br />\r\n&nbsp;&nbsp;&nbsp; public function createObject($className) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new $className();<br />\r\n&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n\r\n<p>?&gt;</p>\r\n</div>\r\n\r\n<div class="code">&lt;?php<br />\r\n//model.php file<br />\r\nclass model {<br />\r\n&nbsp;&nbsp;&nbsp; //put your code here<br />\r\n&nbsp;&nbsp; &nbsp;//has nothing now but you may want to create db connection here<br />\r\n}\r\n<p>&nbsp;</p>\r\n\r\n<p>?&gt;</p>\r\n</div>\r\n\r\n<div class="code">\r\n<p>&lt;?php<br />\r\n//view.php file</p>\r\n\r\n<p>class templateAttributes {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; protected $attributes;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; public function templateAttributes() {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $this-&gt;setDefaultSettings();<br />\r\n&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; private function setDefaultSettings() {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //load some default setting<br />\r\n&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; public function getAttribute($key=null) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(is_null($key)){<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return $this-&gt;attributes;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }else{<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return $this-&gt;attributes[strtoupper($key)];<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; /*<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; * Function: reset<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; * This function cleans the TemplateAttributes properties<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; */<br />\r\n&nbsp;&nbsp;&nbsp; public function reset(){<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $this-&gt;attributes = array();<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $this-&gt;setDefaultSettings();<br />\r\n&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; /*<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; * Function: setAttribute<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; * Parameters:<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $key - index by which to access the value, it could also be an array or string<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $val - value for the provided index($key)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; * This function assings a variable to a template<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; */</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; public function setAttribute($key=NULL, $val=NULL) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!is_null($key)) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (is_array($key)) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $key = array_change_key_case($key, CASE_UPPER);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $this-&gt;attributes = array_merge($this-&gt;attributes, $key);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $this-&gt;attributes[strtoupper($key)] = $val;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n\r\n<p>class view {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; public function setTemplate($filePath) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $file = &#39;view&#39;. DIRECTORY_SEPARATOR . $filePath;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (file_exists($file))<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return $file;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo &quot;Unable to include &quot; . $file . &#39;&lt;br&gt;&#39;;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; /*<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; * Function: fetch<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; * Parameters:&nbsp;&nbsp; &nbsp;void<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; * This function returns the HTML equivalent of the pasrsed template file<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; */</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; public function fetch($templatePath=false, $templateAttributeObj=null) {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!($templatePath = $this-&gt;setTemplate($templatePath)) === false) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ob_start();<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $templateProperties = array();<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ($templateAttributeObj instanceof templateAttributes) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $templateProperties = $templateAttributeObj-&gt;getAttribute();<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach ($templateProperties as $key =&gt; $val)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $$key = $val;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; include_once($templatePath);<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $content = ob_get_contents();<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ob_end_clean();<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return $content;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return NULL;<br />\r\n&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; /*<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; * Function: display<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; * Parameters:&nbsp;&nbsp; &nbsp;void<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; * This function prints the HTML equivalent of the pasrsed template file<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; */</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; public function display($templatePath=false, $templateProperties=null) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo $this-&gt;fetch($templatePath, $templateProperties);<br />\r\n&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}<br />\r\n?&gt;</p>\r\n</div>\r\n\r\n<p>Now that we have necessary classes, let&#39;s use these to create working controller, model and view. We are going to create set of files to view list of users for this example. Lets start with model first.</p>\r\n\r\n<div class="code">\r\n<p>&lt;?php</p>\r\n\r\n<p>//model/userModel.php<br />\r\nclass userModel extends model {</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; //put your code here</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; function listValidUsers() {<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;//generally we would go to db and fetch the data<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return array(<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; array(&quot;ID&quot; =&gt; &quot;1&quot;, &quot;NAME&quot; =&gt; &quot;TEST USERS 1&quot;)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; , array(&quot;ID&quot; =&gt; &quot;2&quot;, &quot;NAME&quot; =&gt; &quot;TEST USERS 2&quot;)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br />\r\n&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n\r\n<p>?&gt;</p>\r\n</div>\r\n\r\n<p>Our template would be :</p>\r\n\r\n<div class="code">//file view/listUser.php<br />\r\n&lt;table border=&quot;1&quot;&gt;<br />\r\n&nbsp;&nbsp;&nbsp; &lt;tr&gt;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td&gt;ID&lt;/td&gt;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td&gt;NAME&lt;/td&gt;<br />\r\n&nbsp;&nbsp;&nbsp; &lt;/tr&gt;<br />\r\n&nbsp;&nbsp;&nbsp; &lt;?php foreach($USERS as $row){?&gt;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;tr&gt;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td&gt;&lt;?php echo $row[&quot;ID&quot;];?&gt;&lt;/td&gt;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;td&gt;&lt;?php echo $row[&quot;NAME&quot;];?&gt;&lt;/td&gt;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/tr&gt;<br />\r\n&nbsp;&nbsp;&nbsp; &lt;?php } ?&gt;<br />\r\n&lt;/table&gt;\r\n<p>&nbsp;</p>\r\n</div>\r\n\r\n<p>and finally the controller:</p>\r\n\r\n<div class="code">&lt;?php<br />\r\n//controller/user.php file<br />\r\nclass user extends controller {\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;&nbsp;&nbsp; function listUser() {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $model = $this-&gt;useModel(&#39;userModel&#39;);//get the model<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $view = $this-&gt;getView();<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;$objTAttrib = new TemplateAttributes();<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $objTAttrib-&gt;setAttribute(&#39;users&#39;, $model-&gt;listValidUsers());<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $view-&gt;display(&quot;listUser.php&quot;, $objTAttrib);<br />\r\n&nbsp;&nbsp;&nbsp; }</p>\r\n\r\n<p>}</p>\r\n\r\n<p>?&gt;</p>\r\n</div>\r\n\r\n<p>And there you have it, we have separated all three model, view and controller neatly.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>', '2013-02-20 03:11:49', , 'simplemvc.zip', 'application/octet-stream', 5929),
(2, 2, 'My first attempt on creating a mobile app using phonegap', '<p>So our company wanted to step on mobile development avenue and we wanted to cook up a quick mobile application as a demo. The problem was we didn&#39;t have anyone in our team who have had experience with building mobile application, added to that we wanted to make sure that the application we build will run on major mobile devices or OS. Ayhan our VP of Software Engineering team in Innovate knew exaclty what we needed - phonegap. It didn&#39;t take much time to write simple apps using phonegap because all we needed to know was HTML,CSS and javascript. After adding jquery mobile to the mix, we were able to improve on the a<span class="st"><em>esthetics</em> appeal of the UI.</span></p>\r\n\r\n<p>Then one day when I was hanging out with my friends, we were talking about how nice it would be if we had an application that would keep taps of petty amounts that we owed each other. &nbsp; I went like :<br />\r\n<img alt="" src="http://newapassa.com/Deewen/Settings/Images/challenge_accepted.png" /></p>\r\n\r\n<p>So I started on a simple app using obviously phonegap. If you are trying out phonegap and your app heavily uses lists(as most of them tend to do), I do have one suggestion. I noticed that its much faster if we don&#39;t initialize(append content to list and refresh it) the lists using jquery mobile at the startup but modify the code so that the list gets initilized/populated when it is needed. For eg: I had lists for borrowings and lendings which I would initialize on device ready event which was obviously slowing down my startup, but later I modified the js code so that I would only append content to the list and refresh it prior to calling changePage. Last but not least, I really want to thank my lil brother Nishant who helped me build this application and for building those awesome logos for the app.</p>\r\n\r\n<p>I have attached the application along with this thread and you can download it from the link provided above. At the moment it can only be run in android. I have yet to find out a way to make it available in IOS without me having to manually add the device identification number while building the app! If you know how to do it then please help me out :)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>', '2013-02-20 23:20:19', NULL, NULL, NULL, NULL),
(3, 3, 'If possible always avoid running queries against INFORMATION_SCHEMA specially on ajax requests', '<p><abstract>I was having pretty difficult time to figure out what was causig my ajax request to complete in 6 seconds or more. Well after you have read the title I think you already know where this is going but I really had to spend considerable amount of time to figure it out. So I basically had a rest end point where I would instantiate a model and call some methods on it. </abstract>This model took a table name as&nbsp;constructor&nbsp;parameter and it would in turn execute :</p>\r\n\r\n<div class="code">\r\n<p>&quot;SELECT UPPER(COLUMN_NAME) as column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE LOWER(TABLE_NAME) = :table_name&quot;</p>\r\n</div>\r\n\r\n<p>in order to get the column names of that table. Guess how much time it took to execute - whooping&nbsp;6.29secs.</p>\r\n\r\n<p>It was difficult for me to figure this out because there were other SELECT statements with GROUP BY clause being used which grabbed all my attention while this&nbsp;particular query just escaped my radar. &nbsp;</p>', '2013-02-25 03:53:43', NULL, NULL, NULL, NULL),
(4, 2, 'Phonegap : How to play local music file in IOS', '<p><abstract>OK you might be thinking what&#39;s the big deal!! Just go throught the tutorial <a href="http://docs.phonegap.com/en/2.7.0/cordova_media_media.md.html#Media" target="_blank">here</a> and get things done right? Well but in the example, there is nothing about loading music file from local installation.</abstract> The first step for us is to find out what is the root path in the mobile phone, here is the javascript snippet with complete example:</p>\r\n\r\n<div class="code">\r\n<p>var myApp = {<br />\r\n&nbsp; &nbsp; rootPath: null,<br />\r\n&nbsp; &nbsp; initialize: function() {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; var self = this;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; document.addEventListener(&quot;deviceready&quot;,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; function() {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.setRootPath();<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; self.playMusic(&quot;music/xyz.mp3&quot;);<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; , false);<br />\r\n&nbsp; &nbsp; }<br />\r\n&nbsp; &nbsp; , setRootPath: function() {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; var curURL = document.URL;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; var root = curURL.replace(/(\\/index.html)$/i, &quot;&quot;) + &quot;/&quot;;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; if (root.indexOf(&quot;file:&quot;) == 0) {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <b>//remove file:/// from the path because IOS cannot read that URL!<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //eg : android and browsers have no issue loading &quot;file:///var/mobile/Applications/594947CB-A600-42D7-8781-8CE944D61061/Library/HydraApps/0/music/xyz.mp3&quot;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //but ios however cannot play from such path, the valid one for IOS is &quot;/var/mobile/Applications/594947CB-A600-42D7-8781-8CE944D61061/Library/HydraApps/0/music/xyz.mp3&quot;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //this took quite some time for me to figure out</b><br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.rootPath = root.substr(8);<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; }else{<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.rootPath = root;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; }</p>\r\n\r\n<p>&nbsp; &nbsp; }<br />\r\n&nbsp; &nbsp; , playMusic: function(mp3File) {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; //assuimg all your music file are within asset/www/music folder<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; var media = new Media(this.rootPath + &nbsp;mp3File,<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; function() {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log(&quot;playAudio():Audio Success&quot;);<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; function(err) {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log(&quot;playAudio():Audio Error: &quot; + err);<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (var e in err) {<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //alert(e+&quot; --- &quot;+err[e]);<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log(e + &quot; --- &quot; + err[e]);<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return false;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; });<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; media.play();<br />\r\n&nbsp; &nbsp; }</p>\r\n\r\n<p>}</p>\r\n</div>', '2013-05-23 22:04:54', NULL, NULL, NULL, NULL)
EOD;
	array_push($records, $record);	

		foreach($tables as $table){
			$query = $this->db->query($table['script']);	
			echo '<div>TABLE '.$table['name'].' CREATED.</div>';
		}
		foreach($records as $record){
			$query = $this->db->query($record);	
			echo '<div>INSERT COMPLETED.</div>';
		}
		foreach($constraints as $constraint){
			if(!$this->doesConstraintExist($constraint['name'])){
				$this->db->query($constraint['script']);	
				echo '<div>CONSTRAINT '.$constraint['name'].' ADDED.</div>';
			}
		}
		

		echo '<div>SETUP COMPLETED.</div>';
	}
}

?>